{"version":3,"sources":["scripts.js"],"names":["recordButton","document","getElementById","buttonsElement","headerElement","stopButton","selectorFilter","endOfDoc","chunks","constraints","audio","audioCreateContainers","stream","connectHighPassFilter","connectDistordusFilter","createReverb","readEmulatorFile","convolver","audioCtx","createConvolver","FileReader","file","getEmulatorFile","arrayBuffer","decodeAudioData","buffer","source","connect","distortion","curve","makeDistortionCurve","amount","i","k","x","Float32Array","deg","Math","PI","abs","oversample","streamDestination","biquadFilter","type","frequency","setValueAtTime","currentTime","biquadFilter2","Q","gain","window","AudioContext","webkitAudioContext","createMediaStreamDestination","mediaRecorder","MediaRecorder","startRecord","start","disabled","resultofchangeButtonColorCall","changeButtonColor","console","log","onclick","ondataavailable","blobevent","push","data","stop","onstop","e","blob","Blob","createElementAudioDisplay","URL","createObjectURL","audioFileName","createWaveShaper","createMediaStreamSource","createBiquadFilter","elementThatIsNamedSelect","addEventListener","audioFilterSelected","options","selectedIndex","value","disconnect","reverb","button","backgroundColor","textColor","style","color","audioURL","audioElement","createElement","setAttribute","src","className","body","insertBefore","newTitle","createTextNode","textEdit","appendChild","onError","err","Promise","resolve","reader","onload","evt","target","result","readAsArrayBuffer","reverbFile","files","onSuccess","navigator","mediaDevices","getUserMedia","then"],"mappings":"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","file":"scripts.0a0eded1.js","sourceRoot":"..","sourcesContent":["let recordButton = document.getElementById(\"record\")\nvar buttonsElement = document.getElementById('buttons')\nvar headerElement = document.getElementById(\"Welcome\")\nlet stopButton = document.getElementById(\"stop\")\nlet selectorFilter = document.getElementById(\"audio-filters\")\nlet endOfDoc = document.getElementById('end')\nlet chunks = []\nlet constraints = { audio: true }\nlet audioCreateContainers = async function(stream) {\n    var audioCtx = new(window.AudioContext || window.webkitAudioContext)()\n    var streamDestination = audioCtx.createMediaStreamDestination()\n    const mediaRecorder = new MediaRecorder(streamDestination.stream)\n    let startRecord = function() {\n        mediaRecorder.start()\n        stopButton.disabled = false;\n        recordButton.disabled = true;\n        const resultofchangeButtonColorCall = changeButtonColor(recordButton, \"#b61827\", \"white\")\n        console.log(\"result\", resultofchangeButtonColorCall)\n    }\n    recordButton.onclick = startRecord;\n    mediaRecorder.ondataavailable = function(blobevent) {\n        chunks.push(blobevent.data);\n    }\n    stopButton.onclick = function() {\n        mediaRecorder.stop()\n        changeButtonColor(recordButton, \"rgb(255, 134,124, .4)\", \"black\")\n        stopButton.disabled = true;\n        recordButton.disabled = false;\n\n    }\n    mediaRecorder.onstop = function(e) {\n        const blob = new Blob(chunks, { 'type': 'audio/ogg; codecs=opus' });\n        chunks = [];\n        const audioURL = window.URL.createObjectURL(blob);\n        createElementAudioDisplay(audioURL)\n        audioFileName()\n    }\n\n    var distortion = audioCtx.createWaveShaper()\n    var source = audioCtx.createMediaStreamSource(stream)\n    var biquadFilter = audioCtx.createBiquadFilter()\n    var biquadFilter2 = audioCtx.createBiquadFilter()\n\n    function connectHighPassFilter() {\n        source.connect(biquadFilter)\n        biquadFilter.type = \"highpass\";\n        biquadFilter.frequency.setValueAtTime(6000, audioCtx.currentTime);\n        biquadFilter.connect(biquadFilter2)\n        biquadFilter2.type = \"peaking\";\n        biquadFilter2.frequency.setValueAtTime(7000, audioCtx.currentTime);\n        biquadFilter2.Q = 20\n        biquadFilter2.gain.setValueAtTime(30, audioCtx.currentTime);\n        biquadFilter2.connect(streamDestination)\n    }\n\n    function connectDistordusFilter() {\n        source.connect(distortion);\n\n        function makeDistortionCurve(amount) {\n            var k = typeof amount === 'number' ? amount : 60,\n                n_samples = 44100,\n                curve = new Float32Array(n_samples),\n                deg = Math.PI / 180,\n                i = 0,\n                x;\n            for (; i < n_samples; ++i) {\n                x = i * 2 / n_samples - 1;\n                curve[i] = (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n            }\n            return curve;\n        }\n        distortion.curve = makeDistortionCurve(800);\n        distortion.oversample = '4x';\n        distortion.connect(streamDestination);\n\n    }\n    async function createReverb() {\n        let convolver = audioCtx.createConvolver();\n        let reader = new FileReader()\n        let file = getEmulatorFile()\n            // equivalent aux 3 lignes suivantes \n            // readEmulatorFile (file).then(arrayBuffer => audioCtx.decodeAudioData(arrayBuffer)).then(buffer=>{\n            //     convolver.buffer=buffer\n            //     return convolver\n            // })\n        let arrayBuffer = await readEmulatorFile(file)\n        convolver.buffer = await audioCtx.decodeAudioData(arrayBuffer);\n\n        return convolver;\n\n    }\n\n    var elementThatIsNamedSelect = document.getElementById(\"audio-filters\");\n    connectDistordusFilter()\n    elementThatIsNamedSelect.addEventListener('change', async function() {\n        var audioFilterSelected = elementThatIsNamedSelect.options[elementThatIsNamedSelect.selectedIndex].value;\n        if (audioFilterSelected === \"distordus\") {\n            biquadFilter2.disconnect()\n            connectDistordusFilter()\n        } else if (audioFilterSelected === \"HighPass\") {\n            distortion.disconnect()\n            connectHighPassFilter()\n        } else if (audioFilterSelected === \"reverb\") {\n            let reverb = await createReverb()\n            distortion.disconnect()\n            biquadFilter2.disconnect()\n            source.connect(reverb)\n            reverb.connect(streamDestination)\n\n        }\n    });\n}\n\n\nfunction changeButtonColor(button, backgroundColor, textColor) {\n    button.style.backgroundColor = backgroundColor\n    button.style.color = textColor\n    return \"poute\"\n}\n\nfunction createElementAudioDisplay(audioURL) {\n    var audioElement = document.createElement('audio')\n    audioElement.setAttribute(\"controls\", true)\n    audioElement.src = audioURL\n    audioElement.className = \"audio-display-style\"\n        //audioElement.style.backgroundColor = \"rgb(255, 0, 0)\"\n    document.body.insertBefore(audioElement, endOfDoc);\n}\n\nfunction audioFileName() {\n    var newTitle = document.createTextNode(\"mon titre audio\")\n    var textEdit = document.createElement(\"div\")\n    textEdit.appendChild(newTitle)\n    document.body.insertBefore(textEdit, endOfDoc);\n}\nlet onError = function(err) {\n    console.log('The following error occured: ' + err);\n}\nasync function readEmulatorFile(file) {\n    return new Promise((resolve) => {\n        var reader = new FileReader();\n        reader.onload = function(evt) {\n            resolve(evt.target.result);\n        };\n        reader.readAsArrayBuffer(file);\n\n    })\n}\n\nfunction getEmulatorFile() {\n    var reverbFile = document.getElementById(\"reverb-file\")\n    return reverbFile.files[0]\n}\n\nlet onSuccess = function(stream) { audioCreateContainers(stream) }\nnavigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError)\n\n/*function dessiner() {\n    var canevas = document.getElementById('tutoriel');\n    if (canevas.getContext) {\n        var ctx = canevas.getContext('2d');\n\n        var rectangle = new Path2D();\n        ctx.fillStyle = 'rgb(0,0, 0)'\n        rectangle.rect(10, 10, 50, 50);\n\n        var cercle = new Path2D();\n        cercle.moveTo(125, 35);\n        cercle.arc(100, 35, 25, 0, 2 * Math.PI);\n        ctx.fillStyle = 'rgb(255, 0, 0)';\n\n\n        ctx.fill(rectangle);\n        ctx.fill(cercle);\n\n    }\n}\ndessiner() */"]}